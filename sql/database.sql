-- Enable RLS (Row Level Security)
alter table auth.users enable row level security;

-- Drop existing tables if they exist
drop table if exists public.invoice_items CASCADE;
drop table if exists public.invoices CASCADE;
drop table if exists public.customers CASCADE;
drop table if exists public.products CASCADE;
drop table if exists public.profiles CASCADE;
drop table if exists public.companies CASCADE;

-- Companies table with normalized email
create table public.companies (
	id bigint generated by default as identity primary key,
	name text not null,
	address text,
	phone text,
	email text unique not null check (email = lower(trim(email))),
	gst_number text,
	gst_rate decimal(5,2) default 18.00,
	enable_discount boolean default true,
	default_discount_rate decimal(5,2) default 5.00,
	created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table public.companies enable row level security;


-- Profiles table
create table public.profiles (
    id uuid references auth.users(id) primary key,
    company_id bigint references public.companies(id),
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table public.profiles enable row level security;

-- Profiles RLS policy
create policy "Users can manage own profile" on public.profiles
    for all using (auth.uid() = id);

-- Products table
create table public.products (
	id bigint generated by default as identity primary key,
	company_id bigint references public.companies(id) not null,
	name text not null,
	sku text,
	price decimal(10,2) not null,
	stock integer not null default 0,
	category text,
	created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table public.products enable row level security;

-- Customers table
create table public.customers (
	id bigint generated by default as identity primary key,
	company_id bigint references public.companies(id) not null,
	name text not null,
	email text,
	phone text,
	address text,
	created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table public.customers enable row level security;

-- Invoices table
create table public.invoices (
	id bigint generated by default as identity primary key,
	company_id bigint references public.companies(id) not null,
	customer_id bigint references public.customers(id) not null,
	invoice_number text not null,
	date date not null,
	total_amount decimal(10,2) not null,
	gst_amount decimal(10,2) not null,
	discount_amount decimal(10,2) default 0,
	status text check (status in ('paid', 'pending', 'overdue')) not null,
	created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table public.invoices enable row level security;

-- Invoice items table
create table public.invoice_items (
	id bigint generated by default as identity primary key,
	invoice_id bigint references public.invoices(id) not null,
	product_id bigint references public.products(id) not null,
	quantity integer not null,
	price decimal(10,2) not null,
	amount decimal(10,2) not null,
	created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table public.invoice_items enable row level security;

-- Row Level Security Policies

-- Disable RLS temporarily
alter table public.companies disable row level security;

-- Clear existing data
truncate table public.companies cascade;

-- Insert company data with explicit email
INSERT INTO public.companies (
	name, 
	address, 
	phone, 
	email, 
	gst_number, 
	gst_rate,
	enable_discount,
	default_discount_rate,
	created_at
)
VALUES (
	'Murali Agencies',
	'10,Neela North Side,Nagapattinam,Tamilnadu-611001',
	'8300101784',
	'blackboytechie@gmail.com',
	'f5e46fw4e44g',
	18.00,
	true,
	5.00,
	'2025-02-09 07:10:18.369504+00'
);



-- Re-enable RLS
alter table public.companies enable row level security;

-- Companies: Allow public read access during authentication
create policy "Enable public read access" on public.companies
	for select
	using (true);

-- Products: Users can only access products from their company
create policy "Users can manage own company products" on public.products
	for all using (
		company_id in (
			select p.company_id from public.profiles p
			where p.id = auth.uid()
		)
	);

-- Customers: Users can only access customers from their company
create policy "Users can manage own company customers" on public.customers
	for all using (
		company_id in (
			select p.company_id from public.profiles p
			where p.id = auth.uid()
		)
	);

-- Invoices: Users can only access invoices from their company
create policy "Users can manage own company invoices" on public.invoices
	for all using (
		company_id in (
			select p.company_id from public.profiles p
			where p.id = auth.uid()
		)
	);

-- Invoice items: Users can only access invoice items from their company's invoices
create policy "Users can manage own company invoice items" on public.invoice_items
	for all using (
		invoice_id in (
			select i.id from public.invoices i
			where i.company_id in (
				select p.company_id from public.profiles p
				where p.id = auth.uid()
			)
		)
	);